from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import ReplyKeyboardRemove
from data.config import RES_PATH
from keyboards.default import sex_kb, course_kb, type_kb, level_kb, base_kb, program_kb, no_kb
from keyboards.checking import answers
from loader import dp
from states import new_user

from backend.docx_editor import add_to_docx
from backend.variable_checker import vars_from_dict



@dp.message_handler(Command('new_doc'), state='*')
async def start_new_doc(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –∏–º—è –≤ <b>–¥–∞—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ</b>\n\n'
                         '<i><b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b></i>\n'
                         'üëâüèª <i><b>–ö–æ–º—É?</b> –ö—Ä–∞—Å–Ω–æ–≤—É –ò–ª—å–µ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á—É</i>\n'
                         'üëâüèª <i><b>–ö–æ–º—É?</b> –ù–µ–±–µ–ª–æ–π –ú–∞—Ä–∏–∏ –ò–≥–æ—Ä–µ–≤–Ω–µ</i>', reply_markup=no_kb)

    await new_user.name.set()


@dp.message_handler(state=new_user.name)
async def get_sex(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(name=answer)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π <b>–ø–æ–ª</b> —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:', reply_markup=sex_kb)
    await new_user.sex.set()


@dp.message_handler(state=new_user.sex)
async def get_course(message: types.Message, state: FSMContext):
    answer = message.text
    if answer not in answers.sex_keyboard:
        await message.answer('<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ ü•∫</i>', reply_markup=sex_kb)
        return
    await state.update_data(sex=answer)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π <b>–∫—É—Ä—Å</b> —Ç–∞–∫–∂–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:', reply_markup=course_kb)
    await new_user.course.set()


@dp.message_handler(state=new_user.course)
async def get_type(message: types.Message, state: FSMContext):
    answer = message.text
    if answer not in answers.course_keyboard:
        await message.answer('<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ ü•∫</i>', reply_markup=course_kb)
        return
    await state.update_data(course=answer)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é <b>—Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è</b> —Å –ø–æ–º–æ—â—å—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫:', reply_markup=type_kb)
    await new_user.type.set()


@dp.message_handler(state=new_user.type)
async def get_level(message: types.Message, state: FSMContext):
    answer = message.text
    if answer not in answers.type_keyboard:
        await message.answer('<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ ü•∫</i>', reply_markup=type_kb)
        return
    await state.update_data(type=answer)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <b>—É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—É—á–∞–µ–º–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è</b> —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫:', reply_markup=level_kb)
    await new_user.level.set()


# new handler (program)

@dp.message_handler(state=new_user.level)
async def get_program(message: types.Message, state: FSMContext):
    answer = message.text
    if answer not in answers.level_keyboard:
        await message.answer('<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ ü•∫</i>', reply_markup=level_kb)
        return
    await state.update_data(level=answer)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã</b> —Å –ø–æ–º–æ—â—å—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫:', reply_markup=program_kb)
    await new_user.program.set()

# the end of the new handler


@dp.message_handler(state=new_user.program)
async def get_base(message: types.Message, state: FSMContext):
    answer = message.text
    if answer not in answers.program_keyboard:
        await message.answer('<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ ü•∫</i>', reply_markup=program_kb)
        return
    await state.update_data(program=answer)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ <b>–æ—Å–Ω–æ–≤—É –æ–±—É—á–µ–Ω–∏—è</b> —Å –ø–æ–º–æ—â—å—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫:', reply_markup=base_kb)
    await new_user.base.set()


@dp.message_handler(state=new_user.base)
async def get_year(message: types.Message, state: FSMContext):
    answer = message.text
    if answer not in answers.base_keyboard:
        await message.answer('<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ ü•∫</i>', reply_markup=base_kb)
        return
    await state.update_data(base=answer)
    await message.answer('–í –∫–∞–∫–æ–º –≥–æ–¥—É –≤—ã <b>–ø–æ—Å—Ç—É–ø–∏–ª–∏ –≤ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç</b>?\n\n'
                         '<i>–í–∞–∂–Ω–æ! –ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ <b>–≤ –≤–∏–¥–µ —á–∏—Å–ª–∞</b></i>\n\n'
                         '<i><b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b></i>\n'
                         'üëâüèª <i>2020</i>\n'
                         'üëâüèª <i>2019</i>', reply_markup=no_kb)
    await new_user.year.set()

# new handler

@dp.message_handler(state=new_user.year)
async def get_birth(message: types.Message, state: FSMContext):
    answer = message.text
    await state.update_data(year=answer)
    await message.answer('–ö–æ–≥–¥–∞ –≤—ã <b>—Ä–æ–¥–∏–ª–∏—Å—å</b>?\n\n'
                         '<i>–í–∞–∂–Ω–æ! –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ <b>–≤ –≤–∏–¥–µ –î–ê–¢–ê.–ú–ï–°–Ø–¶.–ì–û–î</b></i>\n\n'
                         '<i><b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b></i>\n'
                         'üëâüèª <i>01.01.1995</i>\n'
                         'üëâüèª <i>12.05.2000</i>', reply_markup=no_kb)
    await new_user.birth.set()

# end of the handler



@dp.message_handler(state=new_user.birth)
async def finish(message: types.Message, state: FSMContext):
    answer = message.text

    await state.update_data(birth=answer)

    data = await state.get_data()

    await message.answer('–û–¥–Ω—É –º–∏–Ω—É—Ç–æ—á–∫—É... ü§î')

    student_vars = vars_from_dict(data)
    add_to_docx(*student_vars)

    await message.answer('–°–ø—Ä–∞–≤–∫–∞ –≥–æ—Ç–æ–≤–∞! ‚ú®\n\n'
                         '‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë —Å–≤–æ–µ–º—É –∏–Ω—Å–ø–µ–∫—Ç–æ—Ä—É –∑–∞ –ø–æ–¥–ø–∏—Å—å—é!')
    await message.answer_document(open(f'{RES_PATH}', 'rb'))

    await state.finish()

    await message.answer('<i>–û—Ñ–æ—Ä–º–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –µ—â—ë —Ä–∞–∑:</i> <b>/new_doc</b>')
